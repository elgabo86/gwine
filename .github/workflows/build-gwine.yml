name: build-gwine

permissions:
  contents: write  # Autorise l'écriture sur le contenu (code, tags, releases)

on:
  schedule:
    - cron: "00 06 * * *" # build at 07:00 UTC every day
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base  # Utilise une image Arch Linux comme environnement

    steps:
      - name: Setup environment
        run: |
          # Met à jour le système et installe les dépendances de base
          printf "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" | tee -a /etc/pacman.conf
          sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/g' /etc/makepkg.conf
          pacman-key --init && pacman-key --populate
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git curl tar  # Outils nécessaires pour le build
          mkdir -p /home/runner/.config/frogminer/

      - name: Create build user and setup AUR
        run: |
          # Ajoute un utilisateur 'build' pour compiler les paquets AUR
          useradd -m --shell=/bin/bash build
          usermod -L build  # Verrouille le mot de passe (pas de login)
          echo "build ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          echo "root ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Passe à l'utilisateur 'build' et configure Paru
          su - build -c "git clone https://aur.archlinux.org/paru-bin.git --single-branch"
          su - build -c "cd paru-bin && makepkg -si --noconfirm"
          su - build -c "rm -rf paru-bin"
          su - build -c "paru -S ntsync-header --noconfirm"


      - name: Clone wine-tkg-git repo and set the gwine recipe
        working-directory: /home/runner/work/
        run: |
          git clone https://github.com/Frogging-Family/wine-tkg-git.git

          # Copie fixsdl.mypatch depuis la racine du dépôt 'gwine'
          git clone https://github.com/elgabo86/gwine gwinetemp
          cp gwinetemp/fixsdl.mypatch wine-tkg-git/wine-tkg-git/wine-tkg-userpatches/

          cd wine-tkg-git/wine-tkg-git
          sed -i 's/_LOCAL_PRESET=""/_LOCAL_PRESET="none"/g' customization.cfg
          sed -i 's/_use_ntsync="false"/_use_ntsync="true"/g' customization.cfg
          sed -i 's/_use_fsync="true"/_use_fsync="false"/g' customization.cfg
          sed -i 's/_wayland_driver="false"/_wayland_driver="true"/g' customization.cfg
          sed -i 's/_proton_fs_hack="false"/_proton_fs_hack="true"/g' customization.cfg
          sed -i 's/_win10_default="false"/_win10_default="true"/g' customization.cfg
          sed -i 's/_protonify="false"/_protonify="true"/g' customization.cfg
          cd wine-tkg-profiles
          sed -i 's/_NOCCACHE="false"/_NOCCACHE="true"/g' advanced-customization.cfg
          sed -i 's/_fsync_spincounts="true"/_fsync_spincounts="false"/g' advanced-customization.cfg
          sed -i 's/_sdl_joy_support="false"/_sdl_joy_support="true"/g' advanced-customization.cfg
          sed -i 's/_user_patches_no_confirm="false"/_user_patches_no_confirm="true"/g' advanced-customization.cfg
          sed -i 's/_PKGNAME_OVERRIDE=""/_PKGNAME_OVERRIDE="none"/g' advanced-customization.cfg

      - name: Start build
        working-directory: /home/runner/work/wine-tkg-git/wine-tkg-git/
        run: |
          yes | ./non-makepkg-build.sh

      - name: Package
        working-directory: /home/runner/work/wine-tkg-git/wine-tkg-git/non-makepkg-builds/
        run: |
          # Trouve le répertoire généré par wine-tkg-git (par exemple, wine-tkg-git-10.2.r1.gec5fbb99)
          BUILD_DIR=$(ls -d wine-tkg-git-* | head -n 1)

          # Extrait la partie de la version en supprimant "wine-tkg-git-" du début et le commit de fin
          VERSION=$(echo "$BUILD_DIR" | sed 's/^wine-tkg-git-\(.*\)\.g[0-9a-f]*$/\1/')

          # Renomme le répertoire avec "gwine-" suivi de la version extraite
          mv "$BUILD_DIR" "gwine-$VERSION"

          # Crée l'archive avec le nom basé sur la version extraite
          tar cJvf "gwine-$VERSION.tar.xz" "gwine-$VERSION"

          # Déplace l'archive vers /tmp pour l'étape de release
          mv "gwine-$VERSION.tar.xz" "/tmp/gwine-$VERSION.tar.xz"

          # Stocke la version dans une variable d'environnement pour l'étape suivante
          echo "EXTRACTED_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: false
          automatic_release_tag: "gwine-${{ env.EXTRACTED_VERSION }}"
          title: "Gwine ${{ env.EXTRACTED_VERSION }}"
          files: "/tmp/gwine-${{ env.EXTRACTED_VERSION }}.tar.xz"
